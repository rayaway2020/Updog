openapi: 3.0.2
servers:
  - url: /api
info:
  description: |-
    This is the Updog API documentation based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io).
    - [The Updog repository](https://github.com/SE701Team2/Updog)
  version: 1.0.11
  title: Updog API - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: 'se701updog@gmail.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Posts
    description: Comments and replies from our user
  - name: User
    description: Operations about user
paths:
  /posts:
    post:
      tags:
        - Posts
      summary: Create Post
      description: Adds a new post
      operationId: createPost
      requestBody:
        description: Create a new post
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text_content:
                  type: string
                  example: This is an example
                parent:
                  type: integer
                  example: null
                newTags:
                  required: false
                  type: array
                  items:
                    type: string
                  example: ['dogs', 'cats']
      responses:
        '201':
          description: successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: Auth token invalid
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
  '/posts/{postId}':
    get:
      tags:
        - Posts
      summary: Find post by ID
      description: Returns a single post
      operationId: getPosttById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '404':
          description: Post not found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Posts
      summary: Update an existing post
      description: Update an existing post by Id
      operationId: modifyPostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent post from user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text_content:
                  type: string
                usersLiked:
                  type: integer
                usersShared:
                  type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '400':
          description: Update failed
        '403':
          description: Invalid author ID
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
    delete:
      tags:
        - Posts
      summary: Deletes a post
      description: Delete an existent post by Id
      operationId: deletePostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Message has been deleted
        '400':
          description: Failed to update
        '403':
          description: Invalid author ID
        '404':
          description: Invalid message ID
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
  '/posts/{postId}/like':
    post:
      tags:
        - Posts
      summary: Like post
      description: Like a post by their Id
      operationId: likePost
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedPost'
        '400':
          description: Auth token not provided
        '401':
          description: Auth token invalid
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
    delete:
      tags:
        - Posts
      summary: Removes Like from Post
      description: Deletes an exisiting like from a post
      operationId: unlikePost
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The liked post has been deleted
        '400':
          description: Auth token not provided
        '401':
          description: Auth token invalid
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
  '/posts/{postId}/share':
    post:
      tags:
        - Posts
      summary: Share post
      description: Share a post by their Id
      operationId: sharePostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Post shared
        '401':
          description: Auth token invalid
        '404':
          description: Post with that Id does not exist
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
    delete:
      tags:
        - Posts
      summary: Unshare a Post
      description: Deletes an exisiting share of a post
      operationId: unsharePostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The liked post has been deleted
        '400':
          description: Auth token not provided
        '401':
          description: Auth token invalid
        '404':
          description: The post was not shared by the user before
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
  '/posts/{postId}/interactions':
    get:
      tags:
        - Posts
      summary: Get post interactions
      description: Gets all users who have liked or shared the post
      operationId: getInteractedUsers
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful Operation
          content:
          application/json:
            schema:
              type: object
              properties:
                likes:
                  $ref: '#/components/schemas/User'
                shares:
                  $ref: '#/components/schemas/User'
        '400':
          description: Auth token not provided
        '401':
          description: Auth token invalid
        '404':
          description: Post with that Id not found
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
  /users:
    get:
      tags:
        - User
      summary: Get all user handles
      description: ''
      operationId: getAllUserHandles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  usernames:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: integer
                        username:
                          type: string
        '400':
          description: Auth token not provided
        '401':
          description: Auth token invalid
        '500':
          description: Internal Server Error
    post:
      tags:
        - User
      summary: Create user
      description: ''
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                nickname:
                  type: string
                  example: IamUser
                email:
                  type: string
                  example: user1@gmail.com
                password:
                  type: string
                  example: userPassword
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Email has already been taken
        '500':
          description: Internal Server Error
    put:
      tags:
        - User
      summary: Modify user
      description: This can only be done by the logged in user.
      operationId: modifyUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                nickname:
                  type: string
                  example: IamUser
                bio:
                  type: string
                  example: This is my bio
                profilePic:
                  type: string
                  example: null
                profileBanner:
                  type: string
                  example: null
      responses:
        '200':
          description: The profile has been updated
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '500':
          description: Internal Server Error
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The user has been deleted
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '500':
          description: Internal Server Error
  /users/authenticate:
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user1@gmail.com
                password:
                  type: string
                  example: userPassword
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Invalid username/password supplied
        '500':
          description: Internal Server Error
  '/users/{username}':
    get:
      tags:
        - User
      summary: Get user by their username
      description: ''
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          description: 'The username of the user that needs to be fetched.'
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '500':
          description: Internal Server Error
  '/users/{username}/follow':
    get:
      tags:
        - User
      summary: Get users who are following or are followers of this username
      description: ''
      operationId: getFollow
      parameters:
        - name: username
          in: path
          description: 'The username of the user that needs to be fetched.'
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  following:
                    $ref: '#/components/schemas/User'
                  followers:
                    $ref: '#/components/schemas/User'
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '500':
          description: Internal Server Error
    post:
      tags:
        - User
      summary: Follow a user
      description: ''
      operationId: followUser
      parameters:
        - name: username
          in: path
          description: 'The username of the user that needs to be fetched.'
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Followers'
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '404':
          description: User not found
        '409':
          description: Already following this user
        '500':
          description: Internal Server Error
    delete:
      tags:
        - User
      summary: Unfollow a user
      description: ''
      operationId: unfollowUser
      parameters:
        - name: username
          in: path
          description: 'The username of the user that needs to be fetched.'
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Followers'
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  '/users/{username}/activity':
    get:
      tags:
        - User
      summary: Get a users activity
      description: ''
      operationId: getUserActivity
      parameters:
        - name: username
          in: path
          description: 'The username of the user that needs to be fetched.'
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  postId:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  activity:
                    type: string
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /feed:
    get:
      tags:
        - User
      summary: Get a users feed
      description: 'This is generated from users this user follows'
      operationId: getFeed
      parameters:
        - name: username
          in: path
          description: 'The username of the user that needs to be fetched.'
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  postId:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  activity:
                    type: string
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '500':
          description: Internal Server Error
  /notifications:
    get:
      tags:
        - User
      summary: Get a users notifications
      description: ''
      operationId: getNotifications
      parameters:
        - name: username
          in: path
          description: 'The username of the user that needs to be fetched.'
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  from:
                    type: string
                  post:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  content:
                    type: string
        '400':
          description: Auth token not provided
        '401':
          description: Access token invalid
        '500':
          description: Internal Server Error
  /tags:
    post:
      tags:
        - Tags
      summary: Create tag
      description: Creates a new Tag
      operationId: createTag
      requestBody:
        description: Create a new Tag
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagName:
                  type: string
                  example: Dogs
      responses:
        '200':
          description: successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
      security:
        - bearerAuth: []
    get:
      tags:
        - Tags
      summary: Gets all tags
      description: Gets all Tags in the database
      operationId: getTags
      responses:
        '200':
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
      security:
        - bearerAuth: []
  /search:
    get:
      tags:
        - Search
      summary: Searches for posts, topics, and users
      description: ''
      operationId: search
      parameters:
        - in: query
          name: query
          description: 'The search query.'
          required: true
          schema:
            type: string
        - in: query
          name: type
          description: 'The type of data to search for: top/latest/people.'
          required: true
          schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal Server Error
  /interests:
    get:
      tags:
        - Interests
      summary: Returns an array of tags that the user is interested in
      description: ''
      operationId: intereests
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  interests:
                    type: array
                    items:
                      type: string
        '500':
          description: Internal Server Error
    post:
      tags:
        - Interests
      summary: Add tags to the user's interests
      description: ''
      security:
        - bearerAuth: []
      operationId: addInterest
      requestBody:
        description: Add tags to the user's interests
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interests:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: successful operation
        '500':
          description: Internal Server Error

    delete:
      tags:
        - Interests
      summary: Remove tags from the user's interests
      description: ''
      security:
        - bearerAuth: []
      operationId: removeInterest
      requestBody:
        description: Remove tags from the user's interests
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interests:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: successful operation
        '500':
          description: Internal Server Error
components:
  schemas:
    Posts:
      x-swagger-router-model: io.swagger.updog.model.Posts
      properties:
        text-content:
          type: string
          example: 'Hello World!'
        author:
          type: integer
          format: int32
          example: 2
        parent:
          type: integer
          format: int32
          example: 5
        usersLiked:
          type: integer
          format: int32
          example: 71
        usersShared:
          type: integer
          format: int32
          example: 52
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        likedUsers:
          type: array
          xml:
            name: likedPosts
            wrapped: true
          items:
            $ref: '#/components/schemas/LikedPost'
        sharedUsers:
          type: array
          xml:
            name: sharedPosts
            wrapped: true
          items:
            $ref: '#/components/schemas/SharedPost'
      xml:
        name: posts
      type: object
    User:
      x-swagger-router-model: io.swagger.updog.model.User
      properties:
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
        nickname:
          type: string
        profilePic:
          type: string
        profileBanner:
          type: string
        bio:
          type: string
        joinedDate:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        followed:
          type: array
          xml:
            name: followed
            wrapped: true
          items:
            $ref: '#/components/schemas/Followers'
        follower:
          type: array
          xml:
            name: follower
            wrapped: true
          items:
            $ref: '#/components/schemas/Followers'
        likedPosts:
          type: array
          xml:
            name: likedPosts
            wrapped: true
          items:
            $ref: '#/components/schemas/LikedPost'
        sharedPosts:
          type: array
          xml:
            wrapped: true
            name: sharedPosts
          items:
            $ref: '#/components/schemas/SharedPost'
      xml:
        name: user
      type: object
    Attachments:
      x-swagger-router-model: io.swagger.updog.model.attachments
      properties:
        postId:
          type: integer
        attachmentLink:
          type: string
      type: object
    Followers:
      x-swagger-router-model: io.swagger.updog.model.followers
      properties:
        followedId:
          type: integer
        followerId:
          type: integer
      type: object
    LikedPost:
      x-swagger-router-model: io.swagger.updog.model.likedpost
      properties:
        postId:
          type: integer
        userId:
          type: integer
      type: object
    SharedPost:
      x-swagger-router-model: io.swagger.updog.model.sharedpost
      properties:
        postId:
          type: integer
        userId:
          type: integer
      type: object
    Tags:
      x-swagger-router-model: io.swagger.updog.model.tags
      properties:
        tagId:
          type: integer
        tagName:
          type: string
    Interests:
      type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
